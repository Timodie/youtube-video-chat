{
  "name": "YouTube Video Transcript RAG",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "1e2b23d0-1ded-4ca0-b17a-3d52f6ac429f",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -740,
        360
      ],
      "credentials": {
        "openAiApi": {
          "id": "GSb9U9LDxR4GE1Km",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.data || $json.text || $json.concatenated_data }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "video_id",
                "value": "={{ $('Set Video ID').first().json.video_id }}"
              },
              {
                "name": "video_title",
                "value": "={{ $('Set Video ID').first().json.video_title }}"
              },
              {
                "name": "video_url",
                "value": "={{ $('Set Video ID').first().json.video_url }}"
              },
              {
                "name": "channel",
                "value": "={{ $('Set Video ID').first().json.channel }}"
              },
              {
                "name": "start_time",
                "value": "={{ $json.start_time }}"
              },
              {
                "name": "end_time",
                "value": "={{ $json.end_time }}"
              },
              {
                "name": "start_seconds",
                "value": "={{ $json.start_seconds }}"
              }
            ]
          }
        }
      },
      "id": "41b008b6-7dac-4df9-b179-2be1d55b5cb5",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        1000,
        1140
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "ca8d9697-3f32-472d-bde3-d5e5d6bc28d2",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        760,
        1140
      ],
      "credentials": {
        "openAiApi": {
          "id": "GSb9U9LDxR4GE1Km",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "## YouTube Video Transcript RAG Agent",
        "height": 529,
        "width": 903,
        "color": 4
      },
      "id": "f4caacd9-7de7-4206-a97f-ce9ffb3e7f6d",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -320,
        0
      ]
    },
    {
      "parameters": {
        "content": "## YouTube Transcript Processing Pipeline",
        "height": 867,
        "width": 2073,
        "color": 5
      },
      "id": "315c06d7-2993-472e-aa6c-331d74cc67d4",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1460,
        280
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "youtube-transcript",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false
        }
      },
      "id": "368f1ac0-2e46-4d3a-8f52-098a3e3a8631",
      "name": "YouTube Transcript Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1680,
        660
      ],
      "webhookId": "youtube-transcript-webhook",
      "credentials": {
        "httpHeaderAuth": {
          "id": "H19fdZlGooXPxNYM",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {},
      "id": "088cb71b-5aac-4997-b673-01d4c9e612e2",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1,
      "position": [
        -600,
        360
      ],
      "notesInFlow": false,
      "credentials": {
        "postgres": {
          "id": "v67HOeuzxclyCXHP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "youtube_transcripts",
        "filterType": "string",
        "filterString": "metadata->>video_id.eq.{{ $json.video_id }}"
      },
      "id": "b75bd692-1858-4960-b906-9eeae474c987",
      "name": "Delete Old Transcript Chunks",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1140,
        660
      ],
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "WIcnN5aCv4TxfT8c",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "video_id",
              "value": "={{ $json.body.video_id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "video_title",
              "value": "={{ $json.body.title }}",
              "type": "string"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "video_url",
              "value": "={{ $json.body.url }}",
              "type": "string"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "channel",
              "value": "={{ $json.body.channel || 'Unknown' }}",
              "type": "string"
            },
            {
              "id": "8bde4d7f-e4f3-4ebd-9338-dce1350f9eac",
              "name": "transcript",
              "value": "={{ $json.body.transcript }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "48ca078c-a858-4aa6-9faf-840682ab1478",
      "name": "Set Video ID",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1320,
        820
      ]
    },
    {
      "parameters": {
        "content": "## YouTube Video Chat Interface",
        "height": 464.8027193303974,
        "width": 1035.6381264595484
      },
      "id": "13119dd0-47ff-406d-b27f-04313ad97d7f",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1040,
        60
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "5ada0231-e7bb-46ce-80d1-c14d9c83e1ab",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        420,
        380
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json?.chatInput || $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "sessionId",
              "value": "={{ $json?.sessionId || $json.body.sessionId || $json.body.video_id }}",
              "type": "string"
            },
            {
              "id": "c80831d8-c653-4203-8706-adedfdb98f78",
              "name": "video_id",
              "value": "={{ $json?.video_id || $json.body.video_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "68bb0e1d-2f42-41f7-b947-e8ceb5ee7919",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -740,
        140
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "youtube-chat",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false
        }
      },
      "id": "69156d87-8006-4e76-ada7-97e6fdf08616",
      "name": "YouTube Chat Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1000,
        340
      ],
      "webhookId": "youtube-chat-webhook",
      "credentials": {
        "httpHeaderAuth": {
          "id": "H19fdZlGooXPxNYM",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "You are a helpful video assistant that answers questions about YouTube video content using the video's transcript. You are analyzing a single video and should ONLY reference content from this specific video.\n\n**Your Knowledge Base:**\n- Video transcript chunks from the current video only (video_id: {{ $json.video_id }})\n- Video metadata (title, channel, duration)\n- Timestamp information for precise navigation\n\n**Available Tools:**\n- Performing RAG queries on youtube_transcripts (filtered by current video_id)\n- Retrieving full transcript sections when needed\n\n**Answering Strategy:**\n1. Always search the video transcript first using RAG queries\n2. If the question isn't covered in the transcript, clearly state \"This topic wasn't discussed in this video\"\n3. Never guess or provide information not found in the video\n4. Focus on what the speaker actually said, not external knowledge\n\n**Response Style:**\n- **Brief Mode (default):** Answer concisely in 1–2 sentences with the key information from the video\n- **Detailed Mode:** When asked to \"explain,\" \"elaborate,\" or \"tell me more,\" provide fuller context from the video (3–5 sentences)\n- **Quote Mode:** When appropriate, include direct quotes from the speaker\n\n**Important Guidelines:**\n- Only discuss content from THIS video\n- Always provide timestamps so users can jump to relevant moments\n- If unsure about timing, provide the approximate timestamp range\n- Distinguish between what the speaker said vs. visual content (if mentioned)\n- When quoting directly, use quotation marks: The speaker said \"exact quote here\"\n\nYour goal is to help users understand and navigate this specific video's content efficiently."
        }
      },
      "id": "9c5345e7-53a3-4b76-9f5a-4338b8c75e69",
      "name": "YouTube RAG AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -520,
        140
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "youtube_transcripts",
          "mode": "list",
          "cachedResultName": "youtube_transcripts"
        },
        "options": {
          "queryName": "match_youtube_transcripts"
        }
      },
      "id": "17a5ab17-00cb-4e52-878d-dd14a9712bf1",
      "name": "Insert into YouTube Vectorstore",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        920,
        920
      ],
      "credentials": {
        "supabaseApi": {
          "id": "WIcnN5aCv4TxfT8c",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {},
      "id": "4be5a781-fd40-4f7f-bb47-69ca814d7481",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        900,
        1260
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Create YouTube transcripts table\ncreate table youtube_transcripts (\n  id bigserial primary key,\n  content text, -- transcript chunk content\n  metadata jsonb, -- video_id, timestamps, title, etc\n  embedding vector(1536), -- OpenAI embeddings\n  created_at timestamp default now()\n);\n\n-- Create index on video_id for fast filtering\ncreate index idx_youtube_transcripts_video_id on youtube_transcripts using gin ((metadata->>'video_id'));\n\n-- Create index on created_at for cleanup\ncreate index idx_youtube_transcripts_created_at on youtube_transcripts (created_at);\n\n-- Create function to search YouTube transcripts by video\ncreate or replace function match_youtube_transcripts (\n  query_embedding vector(1536),\n  video_id_filter text,\n  match_count int default 10,\n  filter jsonb DEFAULT '{}'\n) returns table (\n  id bigint,\n  content text,\n  metadata jsonb,\n  similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_column\nbegin\n  return query\n  select\n    youtube_transcripts.id,\n    youtube_transcripts.content,\n    youtube_transcripts.metadata,\n    1 - (youtube_transcripts.embedding <=> query_embedding) as similarity\n  from youtube_transcripts\n  where \n    metadata->>'video_id' = video_id_filter\n    and metadata @> filter\n  order by youtube_transcripts.embedding <=> query_embedding\n  limit match_count;\nend;\n$$;",
        "options": {}
      },
      "id": "74978d6d-2f32-476d-8e63-1edee3840def",
      "name": "Create YouTube Tables",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1680,
        320
      ],
      "credentials": {
        "postgres": {
          "id": "v67HOeuzxclyCXHP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "youtube_transcripts",
        "toolDescription": "Search for information in this YouTube video's transcript. Always filter by the current video_id.",
        "tableName": {
          "__rl": true,
          "value": "youtube_transcripts",
          "mode": "list",
          "cachedResultName": "youtube_transcripts"
        },
        "options": {
          "queryName": "match_youtube_transcripts",
          "filter": "={{ {\"video_id\": $json.video_id} }}"
        }
      },
      "id": "a4c342cb-653a-4d44-b0c9-25ab5e2bdb72",
      "name": "YouTube Transcript Search",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        160,
        140
      ],
      "credentials": {
        "supabaseApi": {
          "id": "WIcnN5aCv4TxfT8c",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "5e9ea97e-484f-4a12-a826-b697f761f07c",
      "name": "Embeddings OpenAI2",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        260,
        320
      ],
      "credentials": {
        "openAiApi": {
          "id": "GSb9U9LDxR4GE1Km",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Run This Node Once to Set Up YouTube Tables",
        "height": 300,
        "width": 680,
        "color": 3
      },
      "id": "a0c77843-12e3-4a23-ab67-819168af26e2",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1740,
        220
      ]
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"outputText\": \"The speaker explained that project delays were caused by supplier issues and budget constraints, but the team adapted quickly to find alternative solutions.\",\n  \"sources\": [\n    {\n      \"timestamps\": [\"00:12:45–00:13:15\", \"00:18:30–00:19:05\"],\n      \"videoTitle\": \"Project Management Best Practices\",\n      \"videoUrl\": \"https://www.youtube.com/watch?v=abc123\"\n    }\n  ]\n}"
      },
      "id": "7fdb8afc-e778-4fa1-8417-a80d70abed15",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        0,
        360
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Process transcript array into chunks with timestamps\nconst transcript = $json.transcript;\nconst video_id = $('Set Video ID').first().json.video_id;\nconst video_title = $('Set Video ID').first().json.video_title;\nconst video_url = $('Set Video ID').first().json.video_url;\nconst channel = $('Set Video ID').first().json.channel;\n\nif (!transcript || !Array.isArray(transcript)) {\n  throw new Error('Invalid transcript data');\n}\n\n// Group transcript entries into paragraph-sized chunks (10-15 seconds or 2-4 entries)\nconst chunks = [];\nlet currentChunk = [];\nlet chunkStartTime = null;\nlet chunkStartSeconds = null;\n\nfor (let i = 0; i < transcript.length; i++) {\n  const entry = transcript[i];\n  \n  // Start new chunk if this is the first entry\n  if (currentChunk.length === 0) {\n    chunkStartTime = entry.start;\n    chunkStartSeconds = entry.start_seconds;\n  }\n  \n  currentChunk.push(entry);\n  \n  // Create chunk when we have 2-4 entries or reach 15 second window\n  const shouldCreateChunk = (\n    currentChunk.length >= 4 || \n    (entry.start_seconds - chunkStartSeconds) >= 15 ||\n    i === transcript.length - 1\n  );\n  \n  if (shouldCreateChunk) {\n    const chunkText = currentChunk.map(e => e.text).join(' ');\n    const endTime = currentChunk[currentChunk.length - 1].end;\n    const endSeconds = currentChunk[currentChunk.length - 1].start_seconds + 5; // approximate\n    \n    // Create sentence-level timestamp metadata\n    const sentences = currentChunk.map(entry => ({\n      text: entry.text,\n      timestamp: entry.start,\n      seconds: entry.start_seconds\n    }));\n    \n    chunks.push({\n      data: chunkText,\n      start_time: chunkStartTime,\n      end_time: endTime,\n      start_seconds: chunkStartSeconds,\n      end_seconds: endSeconds,\n      sentences: sentences,\n      video_id: video_id,\n      video_title: video_title,\n      video_url: video_url,\n      channel: channel\n    });\n    \n    // Reset for next chunk\n    currentChunk = [];\n  }\n}\n\nreturn chunks.map(chunk => ({ json: chunk }));"
      },
      "id": "95c7e2cc-f489-4dcf-b901-007368473402",
      "name": "Process Transcript Chunks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -560,
        920
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Clean up transcripts older than 24 hours\nDELETE FROM youtube_transcripts \nWHERE created_at < NOW() - INTERVAL '24 hours';\n\n-- Return count of deleted rows\nSELECT 'Cleanup completed' as status;",
        "options": {}
      },
      "id": "cleanup-old-transcripts",
      "name": "Cleanup Old Transcripts",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1460,
        320
      ],
      "credentials": {
        "postgres": {
          "id": "v67HOeuzxclyCXHP",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "YouTube RAG AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Transcript Webhook": {
      "main": [
        [
          {
            "node": "Set Video ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Insert into YouTube Vectorstore",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Insert into YouTube Vectorstore",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "YouTube RAG AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Transcript Chunks": {
      "main": [
        [
          {
            "node": "Process Transcript Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Transcript Chunks": {
      "main": [
        [
          {
            "node": "Default Data Loader",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Video ID": {
      "main": [
        [
          {
            "node": "Delete Old Transcript Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "YouTube RAG AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Chat Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YouTube RAG AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Transcript Search": {
      "ai_tool": [
        [
          {
            "node": "YouTube RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "YouTube Transcript Search",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "YouTube RAG AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "new-youtube-workflow",
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "7a2df3840a4cb311f7156c99fdfa7309c0f4b0bb5e05cd0551fbaa03489f7ec7"
  },
  "id": "YouTubeTranscriptRAG",
  "tags": ["youtube", "transcript", "rag", "video-chat"]
}
